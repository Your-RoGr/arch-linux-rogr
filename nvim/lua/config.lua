
-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
vim.o.completeopt = 'menuone,noselect'

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è luasnip
local luasnip = require 'luasnip'
local async = require "plenary.async"

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è nvim-cmp
local cmp = require 'cmp'
cmp.setup({
  -- completion = {
  --   autocomplete = false
  -- },
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
  }, {
    { name = 'buffer' },
  })
})

local nvim_lsp = require('lspconfig')

-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é on_attach –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏—à, –∫–æ–≥–¥–∞ LSP –ø–æ–¥–∫–ª—é—á–µ–Ω
local on_attach = function(client, bufnr)

  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- –ü—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–≤–∏—à
  local opts = { noremap=true, silent=true }

  -- Mappings –¥–ª—è LSP
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

  require "lsp_signature".on_attach({
      bind = true, -- –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü—ã –Ω–µ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
      floating_window = true, -- –í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
      floating_window_above_cur_line = true, -- –û–∫–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
      floating_window_off_x = 20, -- –û—Ç—Å—Ç—É–ø –æ–∫–Ω–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
      doc_lines = 10, -- –ß–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –æ–∫–Ω–µ
      hint_prefix = 'üëª ' -- –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏
    }, bufnr) -- –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–æ–±–∞–≤—å—Ç–µ –≤ on_attach –∫–ª–∏–µ–Ω—Ç–∞ LSP
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TypeScript
local buf_map = function(bufnr, mode, lhs, rhs, opts)
    vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts or {
        silent = true,
    })
end

nvim_lsp.ts_ls.setup({
    on_attach = function(client, bufnr)
        client.server_capabilities.document_formatting = false
        client.server_capabilities.document_range_formatting = false
        local ts_utils = require("nvim-lsp-ts-utils")
        ts_utils.setup({})
        ts_utils.setup_client(client)
        buf_map(bufnr, "n", "gs", ":TSLspOrganize<CR>")
        buf_map(bufnr, "n", "gi", ":TSLspRenameFile<CR>")
        buf_map(bufnr, "n", "go", ":TSLspImportAll<CR>")
        on_attach(client, bufnr)
    end,
})

local null_ls = require("null-ls")
null_ls.setup({
    sources = {
        null_ls.builtins.diagnostics.eslint, -- –õ–∏–Ω—Ç–µ—Ä ESLint
        null_ls.builtins.code_actions.eslint, -- –î–µ–π—Å—Ç–≤–∏—è ESLint
        null_ls.builtins.formatting.prettier -- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Prettier
    },
    on_attach = on_attach
})

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Stylelint
require'lspconfig'.stylelint_lsp.setup{
  settings = {
    stylelintplus = {
      autoFixOnSave = true, -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      autoFixOnFormat = true, -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    }
  }
}

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ LSP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞
local servers = { 'pyright' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end

-- Autosave plugin
require("auto-save").setup(
    {
    }
)

-- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ fzf –¥–ª—è Telescope
require('telescope').load_extension('fzf')
